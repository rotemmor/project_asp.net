@model IEnumerable<proj1.Models.RecommendationRest>

@{
    ViewBag.Title = "Index";
}



<!DOCTYPE html>

<html class="no-js">
<head>
    <meta charset="utf-8">
    <title>recommendation for rest</title>
    <link rel="stylesheet" href="~/Content/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/icomoon-social.css">
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700,600,800' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="~/Content/leaflet.css" />
    <link rel="stylesheet" href="~/Content/main.css">
    <script src="~/js/modernizr-2.6.2-respond-1.1.0.min.js"></script>
</head>
<body>

    <img src="http://srv1.jpg.co.il/8/55b1848e1a333.png" alt="fu,r," />
    <br />

    <!--only for online users-->
    @if (User.Identity.IsAuthenticated)
    {
        <p>
            @Html.ActionLink("הוספת המלצה ", "Create")
        </p>

    }

    <!--  Search  -->
    <div class="section">
        <div class="row">
            <div class="col-md-12 faq-wrapper">
                <div class="panel-group" id="accordion2">
                    <div class="panel panel-default">
                        <div class="panel-heading" dir="rtl">
                            <h3>אפשרות חיפוש</h3>
                            <form method="get" class="form-inline" dir="rtl">                              
                                <div class="form-group">
                                    <input type="text" class="form-control" id="city" name="city" placeholder="הכנס כאן שם עיר">
                                </div>
                                <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- recommendation data --> 
    <div class="section">
        <div class="container">
            <div class="row">
                @foreach (var item1 in Model)
                {
                    <div class="col-md-4 col-sm-6">
                        <div class="portfolio-item">

                            <div class="portfolio-info">
                                <ul>
                                    <li>@Html.DisplayFor(modelItem => item1.rest.restName)</li>
                                    <p>@Html.DisplayFor(modelItem => item1.rest.restCity) - העיר בה נמצאת המסעדה </p>
                                    <li class="portfolio-project-name"> </li>
                                    <li>@Html.DisplayNameFor(model => model.recoName) : @Html.DisplayFor(modelItem => item1.recoName) </li>
                                    <li>@Html.DisplayFor(modelItem => item1.recoRating)  - ציון שניתן למסעדה </li>
                                    <input type="button" class="btn btn-primary" value="קרא עוד" onclick="location.href='@Url.Action("Details", "RecommendationRests", new  { id = item1.ID })'" />
                                </ul>
                            </div>

                            <div class="portfolio-image">
                                <br />
                                <br />
                                <img src="@Html.DisplayFor(modelItem => item1.rest.imgRest1)">                                                           
                            </div>                     
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>




    <h2 dir="rtl">סטטיסטיקה - מספר ההמלצות בכל עיר</h2>
    <!--garph code-->
    <div id='dashboard'>
    </div>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script type="text/javascript">
    function dashboard(id, fData) {
        var barColor = 'steelblue';
        function segColor(c) { return { low: "#807dba", mid: "#e08214", high: "#41ab5d" }[c]; }

        // compute total for each state.
        fData.forEach(function (d) { d.total = d.freq; });

        // function to handle histogram.
        function histoGram(fD) {
            var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };
            hGDim.w = 500 - hGDim.l - hGDim.r,
            hGDim.h = 300 - hGDim.t - hGDim.b;

            //create svg for histogram.
            var hGsvg = d3.select(id).append("svg")
                .attr("width", hGDim.w + hGDim.l + hGDim.r)
                .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

            // create function for x-axis mapping.
            var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                    .domain(fD.map(function (d) { return d[0]; }));

            // Add x-axis to the histogram svg.
            hGsvg.append("g").attr("class", "x axis")
                .attr("transform", "translate(0," + hGDim.h + ")")
                .call(d3.svg.axis().scale(x).orient("bottom"));

            // Create function for y-axis map.
            var y = d3.scale.linear().range([hGDim.h, 0])
                    .domain([0, d3.max(fD, function (d) { return d[1]; })]);

            // Create bars for histogram to contain rectangles and freq labels.
            var bars = hGsvg.selectAll(".bar").data(fD).enter()
                    .append("g").attr("class", "bar");

            //create the rectangles.
            bars.append("rect")
                .attr("x", function (d) { return x(d[0]); })
                .attr("y", function (d) { return y(d[1]); })
                .attr("width", x.rangeBand())
                .attr("height", function (d) { return hGDim.h - y(d[1]); })
                .attr('fill', barColor)
                .on("mouseover", mouseover)// mouseover is defined below.
                .on("mouseout", mouseout);// mouseout is defined below.

            //Create the frequency labels above the rectangles.
            bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
                .attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
                .attr("y", function (d) { return y(d[1]) - 5; })
                .attr("text-anchor", "middle");

            function mouseover(d) {  // utility function to be called on mouseover.
                // filter for selected state.
                var st = fData.filter(function (s) { return s.State == d[0]; })[0],
                    nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });

                // call update functions of pie-chart and legend.
                //  pC.update(nD);
                //    leg.update(nD);
            }

            function mouseout(d) {    // utility function to be called on mouseout.
                // reset the pie-chart and legend.
                // pC.update(tF);
                //leg.update(tF);
            }

            // create function to update the bars. This will be used by pie-chart.
            hG.update = function (nD, color) {
                // update the domain of the y-axis map to reflect change in frequencies.
                y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

                // Attach the new data to the bars.
                var bars = hGsvg.selectAll(".bar").data(nD);

                // transition the height and color of rectangles.
                bars.select("rect").transition().duration(500)
                    .attr("y", function (d) { return y(d[1]); })
                    .attr("height", function (d) { return hGDim.h - y(d[1]); })
                    .attr("fill", color);

                // transition the frequency labels location and change value.
                bars.select("text").transition().duration(500)
                    .text(function (d) { return d3.format(",")(d[1]) })
                    .attr("y", function (d) { return y(d[1]) - 5; });
            }
            return hG;
        }

        // calculate total frequency by segment for all state.
        var tF = ['low', 'mid', 'high'].map(function (d) {
            return { type: d, freq: d3.sum(fData.map(function (t) { return t.freq[d]; })) };
        });

        // calculate total frequency by state for all segment.
        var sF = fData.map(function (d) { return [d.State, d.total]; });

        var hG = histoGram(sF); // create the histogram.
        // leg = legend(tF);  // create the legend.
    }
    </script>

    <div>
        <script>
            $.getJSON('/Graph/getGraphD', function (data) {
                dashboard('#dashboard', data);
            });

        </script>
    </div>



   
</body>
</html>