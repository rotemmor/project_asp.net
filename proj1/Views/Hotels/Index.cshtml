@model IEnumerable<proj1.Models.Hotel>

@{
    ViewBag.Title = "Index";
}


<head>
    <title>Page-Hotel</title>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700,600,800' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="~/Content/main.css">
    <script src="~/js/modernizr-2.6.2-respond-1.1.0.min.js"></script>
</head>
   
    <img src="http://srv1.jpg.co.il/5/5583eb95533b2.png" alt="כותרת חיפוש מלון1"  />   
<br />

<p dir="rtl">
הגעת לרשימת המלונות המומלצים על ידינו,מלא את השדות מטה וחפש לך מלון טוב ביעד שתבחר- בהצלחה
</p>
<p dir="rtl">
   נא לשים לב - שמות הערים ובתי המלון הינם באנגלית 
</p>

<!--search hotel-->
<form method="get" class="form-inline" dir="rtl">
    <label for="exampleInputName2">אפשרויות חיפוש</label>
    <div class="form-group">
        <input type="text" class="form-control" id="searchHotelCity" name="searchHotelCity" placeholder="הכנס כאן שם עיר">
    </div>
    <div class="form-group">
        <input type="text" class="form-control" id="searchHotelName" name="searchHotelName" placeholder="הכנס שם מלון">
    </div>
    <div class="form-group">
        <input type="text" class="form-control" id="searchHotelRating" name="searchHotelRating" placeholder="הכנס דירוג מלון רצוי">
    </div>
   
    <button type="submit" class="btn btn-default">חיפוש</button>
</form>

<!--for manage-->
@if (User.Identity.Name.Equals("rotemmor"))
{
  <div class="section">
    <div class="container">
        <div class="row">
            <div class="col-md-12 faq-wrapper">
                <div class="panel-group" id="accordion2">                            
                    <div class="panel panel-default">
                        <div class="panel-heading" dir="rtl">
                            <h3>הרשאות מנהל</h3>                                                  
                            @Html.ActionLink("הוספת מלון לרשימה ", "Create")
                        </div>                       
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}

<br />
<br />
<!--hotel list-->
    <div class="eshop-section section">
        <div class="container" dir="rtl">
            <h2>רשימות מלונות</h2>
            <div class="row">
@foreach (var item in Model)
{               
                <div class="col-md-3">
                    <div class="shop-item">
                        <div class="shop-item-image">
                            <img src="@Html.DisplayFor(modelItem => item.imghotel1) " />
                        </div>
                        <div class="title">
                            <h3>@Html.DisplayNameFor(model => model.hotelName):<br />@Html.DisplayFor(modelItem => item.hotelName)  </h3>
                        </div>
                        <div class="price">
                            @Html.DisplayFor(modelItem => item.hotelPrice)
                        </div>                       
                        <div class="actions">
                            <input type="button" class="btn btn-primary" value="קרא עוד" onclick="location.href='@Url.Action("Details", "Hotels", new { id = item.ID })'" />
                            @if (User.Identity.Name.Equals("rotemmor")) // only for manager
                            {
                                @Html.ActionLink("Edit", "Edit", new { id = item.ID })
                                @Html.ActionLink("Delete", "Delete", new { id = item.ID })                            
                            }                          
                        </div>
                    </div>
                </div>       
}                         
            </div>
        </div>
    </div>


<!--google maps -->

<script src="http://maps.googleapis.com/maps/api/js"></script>
<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
<script>

    function dashboard(id, fData) {
        var israel = new google.maps.LatLng(31.9634816, 34.8014353);


        var map;
        var geocoder;


        function initialize() {
            geocoder = new google.maps.Geocoder();
            var mapOptions = {
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: israel
            };

            map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);
            var i = 0;
            for (i = 0; i < fData.length; i++) {
                codeAddress(fData[i]);
            }
        }

        //from address to coardinaite
        function codeAddress(address) {
            geocoder.geocode({ address: address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker(
                    {
                        map: map,
                        position: results[0].geometry.location
                    });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
        google.maps.event.addDomListener(window, 'load', initialize);
    }
    //startin the json that request the details
    $.getJSON("http://localhost:51649/Hotels/getAddress", function (results) {

        dashboard('#googleMap', results);
    });
</script>

<body>
    <div id="googleMap" style="width:1200px;height:380px;"></div>
</body>


<h2 dir="rtl">סטטיסטיקה - מספר המלונות בכל עיר</h2>
<!--garph code-->
<div id='dashboard'>
</div>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript">
    function dashboardA(id, fData) {
        var barColor = 'steelblue';
        function segColor(c) { return { low: "#807dba", mid: "#e08214", high: "#41ab5d" }[c]; }

        // compute total for each state.
        fData.forEach(function (d) { d.total = d.freq; });

        // function to handle histogram.
        function histoGram(fD) {
            var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };
            hGDim.w = 500 - hGDim.l - hGDim.r,
            hGDim.h = 300 - hGDim.t - hGDim.b;

            //create svg for histogram.
            var hGsvg = d3.select(id).append("svg")
                .attr("width", hGDim.w + hGDim.l + hGDim.r)
                .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

            // create function for x-axis mapping.
            var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                    .domain(fD.map(function (d) { return d[0]; }));

            // Add x-axis to the histogram svg.
            hGsvg.append("g").attr("class", "x axis")
                .attr("transform", "translate(0," + hGDim.h + ")")
                .call(d3.svg.axis().scale(x).orient("bottom"));

            // Create function for y-axis map.
            var y = d3.scale.linear().range([hGDim.h, 0])
                    .domain([0, d3.max(fD, function (d) { return d[1]; })]);

            // Create bars for histogram to contain rectangles and freq labels.
            var bars = hGsvg.selectAll(".bar").data(fD).enter()
                    .append("g").attr("class", "bar");

            //create the rectangles.
            bars.append("rect")
                .attr("x", function (d) { return x(d[0]); })
                .attr("y", function (d) { return y(d[1]); })
                .attr("width", x.rangeBand())
                .attr("height", function (d) { return hGDim.h - y(d[1]); })
                .attr('fill', barColor)
                .on("mouseover", mouseover)// mouseover is defined below.
                .on("mouseout", mouseout);// mouseout is defined below.

            //Create the frequency labels above the rectangles.
            bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
                .attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
                .attr("y", function (d) { return y(d[1]) - 5; })
                .attr("text-anchor", "middle");

            function mouseover(d) {  // utility function to be called on mouseover.
                // filter for selected state.
                var st = fData.filter(function (s) { return s.State == d[0]; })[0],
                    nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });

                // call update functions of pie-chart and legend.
              //  pC.update(nD);
            //    leg.update(nD);
            }

            function mouseout(d) {    // utility function to be called on mouseout.
                // reset the pie-chart and legend.
               // pC.update(tF);
                //leg.update(tF);
            }

            // create function to update the bars. This will be used by pie-chart.
            hG.update = function (nD, color) {
                // update the domain of the y-axis map to reflect change in frequencies.
                y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

                // Attach the new data to the bars.
                var bars = hGsvg.selectAll(".bar").data(nD);

                // transition the height and color of rectangles.
                bars.select("rect").transition().duration(500)
                    .attr("y", function (d) { return y(d[1]); })
                    .attr("height", function (d) { return hGDim.h - y(d[1]); })
                    .attr("fill", color);

                // transition the frequency labels location and change value.
                bars.select("text").transition().duration(500)
                    .text(function (d) { return d3.format(",")(d[1]) })
                    .attr("y", function (d) { return y(d[1]) - 5; });
            }
            return hG;
        }

        // calculate total frequency by segment for all state.
        var tF = ['low', 'mid', 'high'].map(function (d) {
            return { type: d, freq: d3.sum(fData.map(function (t) { return t.freq[d]; })) };
        });

        // calculate total frequency by state for all segment.
        var sF = fData.map(function (d) { return [d.State, d.total]; });

        var hG = histoGram(sF); // create the histogram.
           // leg = legend(tF);  // create the legend.
    }
</script>

<div>
    <script>
        $.getJSON('/Graph/getGraphA', function (data) {
            dashboardA('#dashboard', data);
        });
    </script>
</div>



    <!-- Javascripts -->
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery-1.9.1.min.js"><\/script>')</script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="http://cdn.leafletjs.com/leaflet-0.5.1/leaflet.js"></script>
    <script src="~/js/jquery.fitvids.js"></script>
    <script src="~/js/jquery.sequence-min.js"></script>
    <script src="~/js/jquery.bxslider.js"></script>
    <script src="~/js/template.js"></script>
    <script src="~/js/main-menu.js"></script>
